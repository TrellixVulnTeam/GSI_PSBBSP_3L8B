# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Dataclass(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dataclass_id: int=None, dataclass_name: str=None, dataclass_description: str=None):
        """
        Dataclass - a model defined in Swagger

        :param dataclass_id: The dataclass_id of this Dataclass.
        :type dataclass_id: int
        :param dataclass_name: The dataclass_name of this Dataclass.
        :type dataclass_name: str
        :param dataclass_description: The dataclass_description of this Dataclass.
        :type dataclass_description: str
        """
        self.swagger_types = {
            'dataclass_id': int,
            'dataclass_name': str,
            'dataclass_description': str
        }

        self.attribute_map = {
            'dataclass_id': 'dataclass_id',
            'dataclass_name': 'dataclass_name',
            'dataclass_description': 'dataclassDescription'
        }

        self._dataclass_id = dataclass_id
        self._dataclass_name = dataclass_name
        self._dataclass_description = dataclass_description

    @classmethod
    def from_dict(cls, dikt) -> 'Dataclass':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dataclass of this Dataclass.
        :rtype: Dataclass
        """
        return deserialize_model(dikt, cls)

    @property
    def dataclass_id(self) -> int:
        """
        Gets the dataclass_id of this Dataclass.
        Dataclass identifier

        :return: The dataclass_id of this Dataclass.
        :rtype: int
        """
        return self._dataclass_id

    @dataclass_id.setter
    def dataclass_id(self, dataclass_id: int):
        """
        Sets the dataclass_id of this Dataclass.
        Dataclass identifier

        :param dataclass_id: The dataclass_id of this Dataclass.
        :type dataclass_id: int
        """

        self._dataclass_id = dataclass_id

    @property
    def dataclass_name(self) -> str:
        """
        Gets the dataclass_name of this Dataclass.
        Dataclass name

        :return: The dataclass_name of this Dataclass.
        :rtype: str
        """
        return self._dataclass_name

    @dataclass_name.setter
    def dataclass_name(self, dataclass_name: str):
        """
        Sets the dataclass_name of this Dataclass.
        Dataclass name

        :param dataclass_name: The dataclass_name of this Dataclass.
        :type dataclass_name: str
        """

        self._dataclass_name = dataclass_name

    @property
    def dataclass_description(self) -> str:
        """
        Gets the dataclass_description of this Dataclass.
        Dataclass description

        :return: The dataclass_description of this Dataclass.
        :rtype: str
        """
        return self._dataclass_description

    @dataclass_description.setter
    def dataclass_description(self, dataclass_description: str):
        """
        Sets the dataclass_description of this Dataclass.
        Dataclass description

        :param dataclass_description: The dataclass_description of this Dataclass.
        :type dataclass_description: str
        """

        self._dataclass_description = dataclass_description

