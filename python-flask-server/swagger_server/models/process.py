# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Process(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, process_id: int=None, process_name: str=None, process_description: str=None):
        """
        Process - a model defined in Swagger

        :param process_id: The process_id of this Process.
        :type process_id: int
        :param process_name: The process_name of this Process.
        :type process_name: str
        :param process_description: The process_description of this Process.
        :type process_description: str
        """
        self.swagger_types = {
            'process_id': int,
            'process_name': str,
            'process_description': str
        }

        self.attribute_map = {
            'process_id': 'process_id',
            'process_name': 'process_name',
            'process_description': 'process_description'
        }

        self._process_id = process_id
        self._process_name = process_name
        self._process_description = process_description

    @classmethod
    def from_dict(cls, dikt) -> 'Process':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Process of this Process.
        :rtype: Process
        """
        return deserialize_model(dikt, cls)

    @property
    def process_id(self) -> int:
        """
        Gets the process_id of this Process.
        Process identifier

        :return: The process_id of this Process.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id: int):
        """
        Sets the process_id of this Process.
        Process identifier

        :param process_id: The process_id of this Process.
        :type process_id: int
        """

        self._process_id = process_id

    @property
    def process_name(self) -> str:
        """
        Gets the process_name of this Process.
        Process name

        :return: The process_name of this Process.
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name: str):
        """
        Sets the process_name of this Process.
        Process name

        :param process_name: The process_name of this Process.
        :type process_name: str
        """

        self._process_name = process_name

    @property
    def process_description(self) -> str:
        """
        Gets the process_description of this Process.
        Process description

        :return: The process_description of this Process.
        :rtype: str
        """
        return self._process_description

    @process_description.setter
    def process_description(self, process_description: str):
        """
        Sets the process_description of this Process.
        Process description

        :param process_description: The process_description of this Process.
        :type process_description: str
        """

        self._process_description = process_description

