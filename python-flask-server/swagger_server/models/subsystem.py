# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Subsystem(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, subsystem_id: int=None, subsystem_name: str=None, subsystem_description: str=None, subsystem_score_potential_benefits: int=None, subsystem_score_impact: int=None, subsystem_score_prob_success: int=None, subsystem_score_demand: int=None, subsystem_score_cost: int=None, subsystem_score_dev_time: int=None, subsystem_score_total: int=None):
        """
        Subsystem - a model defined in Swagger

        :param subsystem_id: The subsystem_id of this Subsystem.
        :type subsystem_id: int
        :param subsystem_name: The subsystem_name of this Subsystem.
        :type subsystem_name: str
        :param subsystem_description: The subsystem_description of this Subsystem.
        :type subsystem_description: str
        :param subsystem_score_potential_benefits: The subsystem_score_potential_benefits of this Subsystem.
        :type subsystem_score_potential_benefits: int
        :param subsystem_score_impact: The subsystem_score_impact of this Subsystem.
        :type subsystem_score_impact: int
        :param subsystem_score_prob_success: The subsystem_score_prob_success of this Subsystem.
        :type subsystem_score_prob_success: int
        :param subsystem_score_demand: The subsystem_score_demand of this Subsystem.
        :type subsystem_score_demand: int
        :param subsystem_score_cost: The subsystem_score_cost of this Subsystem.
        :type subsystem_score_cost: int
        :param subsystem_score_dev_time: The subsystem_score_dev_time of this Subsystem.
        :type subsystem_score_dev_time: int
        :param subsystem_score_total: The subsystem_score_total of this Subsystem.
        :type subsystem_score_total: int
        """
        self.swagger_types = {
            'subsystem_id': int,
            'subsystem_name': str,
            'subsystem_description': str,
            'subsystem_score_potential_benefits': int,
            'subsystem_score_impact': int,
            'subsystem_score_prob_success': int,
            'subsystem_score_demand': int,
            'subsystem_score_cost': int,
            'subsystem_score_dev_time': int,
            'subsystem_score_total': int
        }

        self.attribute_map = {
            'subsystem_id': 'subsystem_id',
            'subsystem_name': 'subsystem_name',
            'subsystem_description': 'subsystem_description',
            'subsystem_score_potential_benefits': 'subsystem_score_potential_benefits',
            'subsystem_score_impact': 'subsystem_score_impact',
            'subsystem_score_prob_success': 'subsystem_score_prob_success',
            'subsystem_score_demand': 'subsystem_score_demand',
            'subsystem_score_cost': 'subsystem_score_cost',
            'subsystem_score_dev_time': 'subsystem_score_dev_time',
            'subsystem_score_total': 'subsystem_score_total'
        }

        self._subsystem_id = subsystem_id
        self._subsystem_name = subsystem_name
        self._subsystem_description = subsystem_description
        self._subsystem_score_potential_benefits = subsystem_score_potential_benefits
        self._subsystem_score_impact = subsystem_score_impact
        self._subsystem_score_prob_success = subsystem_score_prob_success
        self._subsystem_score_demand = subsystem_score_demand
        self._subsystem_score_cost = subsystem_score_cost
        self._subsystem_score_dev_time = subsystem_score_dev_time
        self._subsystem_score_total = subsystem_score_total

    @classmethod
    def from_dict(cls, dikt) -> 'Subsystem':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subsystem of this Subsystem.
        :rtype: Subsystem
        """
        return deserialize_model(dikt, cls)

    @property
    def subsystem_id(self) -> int:
        """
        Gets the subsystem_id of this Subsystem.
        Subsystem identifier

        :return: The subsystem_id of this Subsystem.
        :rtype: int
        """
        return self._subsystem_id

    @subsystem_id.setter
    def subsystem_id(self, subsystem_id: int):
        """
        Sets the subsystem_id of this Subsystem.
        Subsystem identifier

        :param subsystem_id: The subsystem_id of this Subsystem.
        :type subsystem_id: int
        """

        self._subsystem_id = subsystem_id

    @property
    def subsystem_name(self) -> str:
        """
        Gets the subsystem_name of this Subsystem.
        Subsystem name

        :return: The subsystem_name of this Subsystem.
        :rtype: str
        """
        return self._subsystem_name

    @subsystem_name.setter
    def subsystem_name(self, subsystem_name: str):
        """
        Sets the subsystem_name of this Subsystem.
        Subsystem name

        :param subsystem_name: The subsystem_name of this Subsystem.
        :type subsystem_name: str
        """

        self._subsystem_name = subsystem_name

    @property
    def subsystem_description(self) -> str:
        """
        Gets the subsystem_description of this Subsystem.
        Subsystem description

        :return: The subsystem_description of this Subsystem.
        :rtype: str
        """
        return self._subsystem_description

    @subsystem_description.setter
    def subsystem_description(self, subsystem_description: str):
        """
        Sets the subsystem_description of this Subsystem.
        Subsystem description

        :param subsystem_description: The subsystem_description of this Subsystem.
        :type subsystem_description: str
        """

        self._subsystem_description = subsystem_description

    @property
    def subsystem_score_potential_benefits(self) -> int:
        """
        Gets the subsystem_score_potential_benefits of this Subsystem.
        Subsystem score for its potential benefits

        :return: The subsystem_score_potential_benefits of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_potential_benefits

    @subsystem_score_potential_benefits.setter
    def subsystem_score_potential_benefits(self, subsystem_score_potential_benefits: int):
        """
        Sets the subsystem_score_potential_benefits of this Subsystem.
        Subsystem score for its potential benefits

        :param subsystem_score_potential_benefits: The subsystem_score_potential_benefits of this Subsystem.
        :type subsystem_score_potential_benefits: int
        """

        self._subsystem_score_potential_benefits = subsystem_score_potential_benefits

    @property
    def subsystem_score_impact(self) -> int:
        """
        Gets the subsystem_score_impact of this Subsystem.
        Subsystem score for its impact

        :return: The subsystem_score_impact of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_impact

    @subsystem_score_impact.setter
    def subsystem_score_impact(self, subsystem_score_impact: int):
        """
        Sets the subsystem_score_impact of this Subsystem.
        Subsystem score for its impact

        :param subsystem_score_impact: The subsystem_score_impact of this Subsystem.
        :type subsystem_score_impact: int
        """

        self._subsystem_score_impact = subsystem_score_impact

    @property
    def subsystem_score_prob_success(self) -> int:
        """
        Gets the subsystem_score_prob_success of this Subsystem.
        Subsystem score for its probability of success

        :return: The subsystem_score_prob_success of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_prob_success

    @subsystem_score_prob_success.setter
    def subsystem_score_prob_success(self, subsystem_score_prob_success: int):
        """
        Sets the subsystem_score_prob_success of this Subsystem.
        Subsystem score for its probability of success

        :param subsystem_score_prob_success: The subsystem_score_prob_success of this Subsystem.
        :type subsystem_score_prob_success: int
        """

        self._subsystem_score_prob_success = subsystem_score_prob_success

    @property
    def subsystem_score_demand(self) -> int:
        """
        Gets the subsystem_score_demand of this Subsystem.
        Subsystem score for its demand

        :return: The subsystem_score_demand of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_demand

    @subsystem_score_demand.setter
    def subsystem_score_demand(self, subsystem_score_demand: int):
        """
        Sets the subsystem_score_demand of this Subsystem.
        Subsystem score for its demand

        :param subsystem_score_demand: The subsystem_score_demand of this Subsystem.
        :type subsystem_score_demand: int
        """

        self._subsystem_score_demand = subsystem_score_demand

    @property
    def subsystem_score_cost(self) -> int:
        """
        Gets the subsystem_score_cost of this Subsystem.
        Subsystem score for its cost

        :return: The subsystem_score_cost of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_cost

    @subsystem_score_cost.setter
    def subsystem_score_cost(self, subsystem_score_cost: int):
        """
        Sets the subsystem_score_cost of this Subsystem.
        Subsystem score for its cost

        :param subsystem_score_cost: The subsystem_score_cost of this Subsystem.
        :type subsystem_score_cost: int
        """

        self._subsystem_score_cost = subsystem_score_cost

    @property
    def subsystem_score_dev_time(self) -> int:
        """
        Gets the subsystem_score_dev_time of this Subsystem.
        Subsystem score for its development time

        :return: The subsystem_score_dev_time of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_dev_time

    @subsystem_score_dev_time.setter
    def subsystem_score_dev_time(self, subsystem_score_dev_time: int):
        """
        Sets the subsystem_score_dev_time of this Subsystem.
        Subsystem score for its development time

        :param subsystem_score_dev_time: The subsystem_score_dev_time of this Subsystem.
        :type subsystem_score_dev_time: int
        """

        self._subsystem_score_dev_time = subsystem_score_dev_time

    @property
    def subsystem_score_total(self) -> int:
        """
        Gets the subsystem_score_total of this Subsystem.
        Subsystem total score

        :return: The subsystem_score_total of this Subsystem.
        :rtype: int
        """
        return self._subsystem_score_total

    @subsystem_score_total.setter
    def subsystem_score_total(self, subsystem_score_total: int):
        """
        Sets the subsystem_score_total of this Subsystem.
        Subsystem total score

        :param subsystem_score_total: The subsystem_score_total of this Subsystem.
        :type subsystem_score_total: int
        """

        self._subsystem_score_total = subsystem_score_total

