# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ProcessDataclass(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, process_id: int=None, dataclass_id: int=None, process_dataclass_type: str=None, subsystem_id: int=None):
        """
        ProcessDataclass - a model defined in Swagger

        :param process_id: The process_id of this ProcessDataclass.
        :type process_id: int
        :param dataclass_id: The dataclass_id of this ProcessDataclass.
        :type dataclass_id: int
        :param process_dataclass_type: The process_dataclass_type of this ProcessDataclass.
        :type process_dataclass_type: str
        :param subsystem_id: The subsystem_id of this ProcessDataclass.
        :type subsystem_id: int
        """
        self.swagger_types = {
            'process_id': int,
            'dataclass_id': int,
            'process_dataclass_type': str,
            'subsystem_id': int
        }

        self.attribute_map = {
            'process_id': 'process_id',
            'dataclass_id': 'dataclass_id',
            'process_dataclass_type': 'process_dataclass_type',
            'subsystem_id': 'subsystem_id'
        }

        self._process_id = process_id
        self._dataclass_id = dataclass_id
        self._process_dataclass_type = process_dataclass_type
        self._subsystem_id = subsystem_id

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessDataclass':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessDataclass of this ProcessDataclass.
        :rtype: ProcessDataclass
        """
        return deserialize_model(dikt, cls)

    @property
    def process_id(self) -> int:
        """
        Gets the process_id of this ProcessDataclass.
        Process identifier

        :return: The process_id of this ProcessDataclass.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id: int):
        """
        Sets the process_id of this ProcessDataclass.
        Process identifier

        :param process_id: The process_id of this ProcessDataclass.
        :type process_id: int
        """

        self._process_id = process_id

    @property
    def dataclass_id(self) -> int:
        """
        Gets the dataclass_id of this ProcessDataclass.
        Dataclass identifier

        :return: The dataclass_id of this ProcessDataclass.
        :rtype: int
        """
        return self._dataclass_id

    @dataclass_id.setter
    def dataclass_id(self, dataclass_id: int):
        """
        Sets the dataclass_id of this ProcessDataclass.
        Dataclass identifier

        :param dataclass_id: The dataclass_id of this ProcessDataclass.
        :type dataclass_id: int
        """

        self._dataclass_id = dataclass_id

    @property
    def process_dataclass_type(self) -> str:
        """
        Gets the process_dataclass_type of this ProcessDataclass.
        Process X dataclass type

        :return: The process_dataclass_type of this ProcessDataclass.
        :rtype: str
        """
        return self._process_dataclass_type

    @process_dataclass_type.setter
    def process_dataclass_type(self, process_dataclass_type: str):
        """
        Sets the process_dataclass_type of this ProcessDataclass.
        Process X dataclass type

        :param process_dataclass_type: The process_dataclass_type of this ProcessDataclass.
        :type process_dataclass_type: str
        """

        self._process_dataclass_type = process_dataclass_type

    @property
    def subsystem_id(self) -> int:
        """
        Gets the subsystem_id of this ProcessDataclass.
        Subsystem identifier

        :return: The subsystem_id of this ProcessDataclass.
        :rtype: int
        """
        return self._subsystem_id

    @subsystem_id.setter
    def subsystem_id(self, subsystem_id: int):
        """
        Sets the subsystem_id of this ProcessDataclass.
        Subsystem identifier

        :param subsystem_id: The subsystem_id of this ProcessDataclass.
        :type subsystem_id: int
        """

        self._subsystem_id = subsystem_id

