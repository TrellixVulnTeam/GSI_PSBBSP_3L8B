# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model
from sqlalchemy import Column, Integer, ForeignKey
from swagger_server.database.database import Base


class ProjectUser(Model, Base):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    __tablename__ = 'project_user'
    _project_id = Column(Integer, ForeignKey('project._project_id'), primary_key=True)
    _account_id = Column(Integer, ForeignKey('account._account_id'), primary_key=True)

    def __init__(self, project_id: int=None, account_id: int=None):
        """
        ProjectUser - a model defined in Swagger

        :param project_id: The project_id of this ProjectUser.
        :type project_id: int
        :param account_id: The account_id of this ProjectUser.
        :type account_id: int
        """
        self.swagger_types = {
            'project_id': int,
            'account_id': int
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'account_id': 'account_id'
        }

        self._project_id = project_id
        self._account_id = account_id

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectUser':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectUser of this ProjectUser.
        :rtype: ProjectUser
        """
        return deserialize_model(dikt, cls)

    @property
    def project_id(self) -> int:
        """
        Gets the project_id of this ProjectUser.
        Project identifier

        :return: The project_id of this ProjectUser.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: int):
        """
        Sets the project_id of this ProjectUser.
        Project identifier

        :param project_id: The project_id of this ProjectUser.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def account_id(self) -> int:
        """
        Gets the account_id of this ProjectUser.
        Account identifier

        :return: The account_id of this ProjectUser.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: int):
        """
        Sets the account_id of this ProjectUser.
        Account identifier

        :param account_id: The account_id of this ProjectUser.
        :type account_id: int
        """

        self._account_id = account_id

